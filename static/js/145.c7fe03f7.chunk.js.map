{"version":3,"file":"static/js/145.c7fe03f7.chunk.js","mappings":"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","sources":["components/Header/modals/ReusableModal.tsx","pages/Profile/Posts/PostModal/Comments/Comments.tsx","pages/Profile/Posts/PostModal/PostLikedUserMododal/LikedModal.tsx","pages/Profile/Posts/PostModal/PostModal.tsx","pages/Profile/SignedUserProfile/Modals/SharePostModal/ShareSuggestion.tsx","pages/Profile/SignedUserProfile/Modals/SharePostModal/SharePostModal.tsx","pages/Profile/hooks/useChat.tsx","pages/Profile/hooks/useLikeControl.ts","redux/slices/userSlice/userSlice/thunk/AddComment.ts","redux/slices/userSlice/userSlice/thunk/AddMessage.ts","redux/slices/userSlice/userSlice/thunk/AddToSaved.ts","redux/slices/userSlice/userSlice/thunk/RemoveFromSaved.ts"],"sourcesContent":["import React, { memo } from 'react'\r\n\r\n\r\ninterface IProps {\r\n    visible: boolean;\r\n    setVisible: (value: boolean | ((prevVisible: boolean) => boolean)) => void;\r\n    children: React.ReactNode,\r\n  \r\n    \r\n  }\r\n\r\nconst ReusableModal = ({visible,setVisible,children}: IProps) => {\r\n\r\n \r\nif (!visible) return null\r\n    return (\r\n        <div className='fixed inset-0 z-10   bg-opacity-30 backdrop-blur-sm flex justify-center items-center bg-gray-500' onClick={()=>setVisible(false)} >\r\n            <div onClick={e => e.stopPropagation()} className=' rounded shadow-sm z-20'>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(ReusableModal)","import { doc, getDoc } from 'firebase/firestore';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { db } from '../../../../../firebase/firebase';\r\nimport { Link } from 'react-router-dom';\r\ninterface ParentStateItem {\r\n\r\n    text: string\r\n    userId: string\r\n}\r\n\r\ninterface ParentState {\r\n    posts: ParentStateItem;\r\n}\r\n\r\n\r\nexport const Comments: React.FC<ParentStateItem> = ({ text, userId }) => {\r\n\r\n    const [user, setUser] = useState<any>()\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            const docRef = doc(db, \"users\", userId as string)\r\n            const docSnap = await getDoc(docRef);\r\n\r\n            setUser(docSnap?.data())\r\n\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    return user && (\r\n        <div className='flex mt-2 '>\r\n            <Link\r\n                to={`/${userId}/`}>\r\n                <img className='w-10 h-10 rounded-full mr-4 '\r\n                    src={user.profileImage}\r\n                    alt=\"\" />\r\n            </Link>\r\n            <Link\r\n                to={`/${userId}/`}>\r\n                <h1\r\n                    className='font-medium text-[13px]'>\r\n                    {user.userName}\r\n                </h1>\r\n            </Link>\r\n            <h1 className='ml-2'>{text}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\ninterface ParentStateItem {\r\n\r\n    fullName: string;\r\n    userName: string;\r\n    uid: string;\r\n    profileImage: string\r\n\r\n}\r\n\r\ninterface ParentState {\r\n    posts: ParentStateItem;\r\n}\r\nconst LikedModal: React.FC<ParentStateItem> = ({ fullName, userName, profileImage, uid }) => {\r\n   \r\n  return (\r\n    <div className='flex items-center justify-between bg-white'>\r\n    <div className='flex py-2 mb-2'>\r\n        <Link to={`/${uid}/`}><img className='border-[1px] rounded-full h-12 w-12' alt='prof' src={profileImage ? profileImage : '/images/profile.png'} /></Link>\r\n        <div className='ml-2'>\r\n            <p className=''>{userName}</p>\r\n            <h1 className='text-gray-400'>{fullName}</h1>\r\n        </div>\r\n    </div>\r\n    <div>\r\n        <button className='bg-zinc-200 p-1 px-3 rounded-md font-[600]'>Remove</button>\r\n    </div>\r\n\r\n\r\n</div>\r\n  )\r\n}\r\n\r\nexport default LikedModal","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { db } from '../../../../firebase/firebase'\r\nimport { doc } from 'firebase/firestore'\r\nimport { getDoc } from 'firebase/firestore'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { addComment } from '../../../../redux/slices/userSlice/userSlice/thunk/AddComment'\r\nimport { useAppDispatch, useAppSelector } from '../../../../redux/hooks/redux-hooks'\r\nimport { Comments } from './Comments/Comments'\r\nimport useLikeControl from '../../hooks/useLikeControl'\r\nimport ReusableModal from '../../../../components/Header/modals/ReusableModal'\r\nimport LikedModal from './PostLikedUserMododal/LikedModal'\r\nimport { savePost } from '../../../../redux/slices/userSlice/userSlice/thunk/AddToSaved'\r\nimport { removeSaved } from '../../../../redux/slices/userSlice/userSlice/thunk/RemoveFromSaved'\r\nimport SharePostModal from '../../SignedUserProfile/Modals/SharePostModal/SharePostModal'\r\n\r\nconst PostModal: React.FC = () => {\r\n    const { postId, uid } = useParams()\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useAppDispatch()\r\n    const [text, setText] = useState<string>('')\r\n    const [user, setUser] = useState<any>()\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n    const anotherUser = useAppSelector(user => user.anotherUser.user)\r\n    const [visibleShare, setVisibleShare] = useState(false)\r\n    const [visible, setVisible] = useState(false)\r\n\r\n\r\n    const ref = useRef<HTMLTextAreaElement>(null)\r\n\r\n    const textAreaHandler = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n        setText(event.currentTarget.value)\r\n\r\n    }\r\n\r\n    const addNewComment = async () => {\r\n        dispatch(await addComment({ text: text, postId: postId as string, userId: uid as string }))\r\n        setText('')\r\n\r\n    }\r\n\r\n\r\n    const { likePost, removeLike } = useLikeControl()\r\n\r\n\r\n    // const [num, setNum] = useState(1)\r\n\r\n    // const addLike = async () => {\r\n    //     dispatch(await likePost({ postId: postId , uid: uid  }))\r\n    // }\r\n    const currentPost = user?.posts.find((post: { postId: string | undefined }, index: number) => post.postId === postId)\r\n    const fetchData = async () => {\r\n        const docRef = doc(db, \"users\", uid as string)\r\n        const docSnap = await getDoc(docRef);\r\n        setUser(docSnap.data())\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [signedUser.posts, anotherUser.posts])\r\n\r\n    //     const index = 0\r\n\r\n\r\n\r\n    //     const NextPost = user?.posts[index]\r\n\r\n    // console.log(NextPost)\r\n\r\n\r\n    const commentsEl = currentPost?.commets.map((comment: { text: any, userId: any }) => (\r\n        <Comments text={comment.text} userId={comment.userId} />\r\n    ))\r\n\r\n\r\n\r\n    const likedUsersEl = currentPost?.likes?.map((user: any) => (\r\n        <LikedModal userName={user.userName} fullName={user.fullName} profileImage={user.profileImage} uid={user.uid} />\r\n    ))\r\n\r\n    const userLikedPost = currentPost?.likes.find((user: { uid: any }) => user.uid === signedUser.uid)\r\n\r\n    // const currentSavedPost = signedUser?.post?.find((post: { postId: string | undefined }, index: number) => post.postId === postId)\r\n\r\n    const currentPostSaved = signedUser?.savedPosts?.find(post => post.postId === currentPost?.postId)\r\n\r\n\r\n    // const userAddToSaved = currentSavedPost?.find((user: { postId: string | undefined })=>user.postId === postId)\r\n    console.log(currentPostSaved)\r\n\r\n    return (\r\n        currentPost?.postId && (\r\n\r\n            <div className='fixed inset-0 z-10   bg-opacity-30 backdrop-blur-sm flex justify-center items-center bg-gray-500  ' onClick={() => navigate(-1)} >\r\n                <div onClick={e => e.stopPropagation()} className='  rounded shadow-sm z-20 w-[70%]  '>\r\n                    <div className='md:flex bg-white block w-full '>\r\n\r\n                        <div className=' flex items-center bg-black w-[100%]  h-[50vh] sm:h-[80vh] justify-center  '>\r\n                            <img className=' object-contain w-[900px] h-[80vh] ' src={currentPost.postImage} alt=\"\" />\r\n                        </div>\r\n\r\n                        <div className='w-[100%]'>\r\n                            <div className='bg-white flex justify-between px-4 h-[75px] border-b-[1px] items-center '>\r\n                                <div className='flex w-[100%] items-center '>\r\n                                    <img className='w-10 h-10 rounded-full mr-4' src={user.profileImage} alt=\"\" />\r\n                                    <h1 className=''>{user.userName}</h1>\r\n                                </div>\r\n                            </div>\r\n                            <div className='  overflow-auto hidden md:flex  h-[50vh] p-4 '>\r\n                                {\r\n                                    currentPost.commets.length > 0 || currentPost.text !== '' ?\r\n                                        <div>\r\n                                            <div className='flex'>\r\n                                                <img className='w-10 h-10 rounded-full mr-4 ' src={user.profileImage} alt=\"\" />\r\n                                                <h1 className='font-medium text-[13px]'>{user.userName}</h1>\r\n                                                <h1 className='ml-2'>{currentPost.text}</h1>\r\n\r\n                                            </div>\r\n                                            <div className='flex-col  '>\r\n                                                {commentsEl}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        :\r\n                                        <div className='flex flex-col items-center justify-center  w-[100%]'>\r\n                                            <h1 className='font-bold text-xl'>No comments yet.</h1>\r\n                                            <p className='text-[15px]'>Start the conversation.</p>\r\n                                        </div>\r\n                                }\r\n\r\n                            </div>\r\n                            <div className='flex justify-between mt-2 sm:border-t-[1px] p-2'>\r\n                                <div className='flex'>\r\n                                    <h1 className='mr-2'>\r\n                                        {\r\n                                            userLikedPost ?\r\n                                                <i onClick={() => removeLike({ postId: postId as string, uid: uid as string })}\r\n                                                    className=\"ri-heart-3-fill text-2xl text-red-400 cursor-pointer\">\r\n\r\n                                                </i>\r\n                                                :\r\n                                                <i\r\n                                                    onClick={() => likePost({ postId: postId as string, uid: uid as string })}\r\n\r\n\r\n                                                    className=\"ri-heart-3-line text-2xl cursor-pointer hover:text-zinc-400  \">\r\n                                                </i>\r\n                                        }\r\n                                    </h1>\r\n                                    <h1 className='mr-2'><i className=\"ri-chat-3-line text-2xl cursor-pointer  hover:text-zinc-400\" onClick={() => ref.current?.focus()} ></i></h1>\r\n                                    <i onClick={() => setVisibleShare(true)} className=\"ri-send-plane-line pt-[1px]  cursor-pointer text-2xl hover:text-zinc-400\"></i>\r\n                                    <ReusableModal visible={visibleShare} setVisible={setVisibleShare}>\r\n                                        <SharePostModal postId={postId as string} profileImage={currentPost?.profileImage} user={user} postImage={currentPost.postImage} userName={user.profileImage} />\r\n                                    </ReusableModal>\r\n                                </div>\r\n                                {signedUser.uid === uid ? '' :\r\n                                    <div>\r\n                                        {\r\n                                            currentPostSaved ?\r\n                                                <i\r\n                                                    onClick={() => dispatch(removeSaved(currentPost))}\r\n                                                    className=\"ri-bookmark-fill  text-2xl cursor-pointer\"></i>\r\n                                                :\r\n                                                <i className=\"ri-bookmark-line text-2xl cursor-pointer hover:text-zinc-400\"\r\n                                                    onClick={() => dispatch(savePost(currentPost))}>\r\n                                                </i>}\r\n\r\n                                    </div>\r\n\r\n                                }\r\n\r\n                            </div>\r\n                            <ReusableModal visible={visible} setVisible={setVisible}>\r\n                                {likedUsersEl}\r\n                            </ReusableModal>\r\n                            <div className='flex ml-2 '>\r\n                                <h1 className='mr-2'>{currentPost.likes?.length}</h1>\r\n                                <h1 onClick={() => setVisible(true)}>Like</h1>\r\n                            </div>\r\n                            <div className='flex justify-between p-2 border-t-[1px]'>\r\n                                <textarea ref={ref} className='w-[90%] resize-none outline-none '\r\n                                    value={text}\r\n                                    onChange={(e) => textAreaHandler(e)}\r\n                                    name=\"\" id=\"\"\r\n                                    placeholder='Add a comment...'></textarea>\r\n                                {text !== '' ? <button className='text-blue-500 hover:text-black' onClick={() => addNewComment()}>Post</button> : ''}\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\nexport default PostModal","import React from 'react'\r\nimport { IuserData } from '../../../../../interfaces/interfaces'\r\nimport { useAppDispatch, useAppSelector } from '../../../../../redux/hooks/redux-hooks'\r\nimport useChat from '../../../hooks/useChat'\r\nimport { setChat } from '../../../../../redux/slices/chatSlice/chatSlice'\r\nimport { removeChat } from '../../../../../redux/slices/chatSlice/chatSlice'\r\n\r\n\r\n\r\nconst ShareSuggestion = ({ uid, profileImage, userName, fullName }: IuserData) => {\r\n\r\n    const { chatWithUser } = useChat()\r\n    const dispatch = useAppDispatch()\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n    const currentChat = useAppSelector(chat => chat.chat.chat)\r\n\r\n\r\n    const chatId = signedUser.uid > uid ? signedUser.uid + uid : uid + signedUser.uid\r\n\r\n\r\n    const userInfo = {\r\n        userName,\r\n        profileImage,\r\n        uid,\r\n        chatId\r\n    }\r\n\r\n    return (\r\n        <div className='flex p-2 hover:bg-zinc-200 cursor-pointer justify-between'>\r\n            <div className='flex w-[100%]' >\r\n                <img className='h-12 w-12 rounded-3xl' src={profileImage} alt=\"\" />\r\n                <div className='ml-2 text-[15px]'>\r\n                    <h1 className='font-[500]'>{userName}</h1>\r\n                    <h1 className='text-gray-400'>{fullName}</h1>\r\n\r\n                </div>\r\n            </div>\r\n            {currentChat.uid === uid ?\r\n                <i onClick={()=>dispatch(removeChat())} className=\"ri-checkbox-circle-fill text-2xl text-blue-400 \"></i>\r\n                :\r\n                <i onClick={() => dispatch(setChat(userInfo))} className=\"ri-checkbox-blank-circle-line text-2xl\"></i>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShareSuggestion","import React,{useEffect, useState} from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../../../../../redux/hooks/redux-hooks'\r\nimport ShareSuggestion from './ShareSuggestion'\r\nimport { addMessage } from '../../../../../redux/slices/userSlice/userSlice/thunk/AddMessage';\r\nimport useChat from '../../../hooks/useChat';\r\nimport Search from '../../../../../components/Header/modals/Search/Search';\r\nimport { removeChat } from '../../../../../redux/slices/chatSlice/chatSlice';\r\n\r\nexport interface IPost {\r\n\r\n    postImage: string;\r\n    user: string;\r\n    postId: string;\r\n    profileImage:string;\r\n    userName:string,\r\n\r\n}\r\n\r\nconst SharePostModal = ({user,postImage,profileImage,postId,userName} : IPost) => {\r\n   \r\nconst sharePost = [\r\n    user,\r\n    postImage,\r\n    postId,\r\n    profileImage,\r\n    userName\r\n\r\n]\r\nconst signedUser = useAppSelector(user=>user.user.user)\r\nconst currentChat = useAppSelector(chat=>chat.chat.chat)\r\nconst [selectedImage, setSelectedImage] = useState<File>()\r\nconst [message, setMessage] = useState('')\r\nconst dispatch = useAppDispatch()\r\nconst [width,setWidth] = useState(0)\r\n// const [userToSend,setUserToSend] = useState<any>([])\r\n\r\nconst { chatWithUser } = useChat()\r\n\r\n\r\n\r\n// useEffect(()=>{\r\n// if(currentChat.chatId !== ''){\r\n//     setUserToSend((prev: any)=>[...prev,currentChat])\r\n// }\r\n\r\n\r\n\r\n// },[currentChat.chatId])\r\n\r\n\r\nconst sendPost = async ()=>{\r\n    chatWithUser({uid: currentChat.uid,profileImage:currentChat.profileImage,userName:currentChat.userName})\r\n    dispatch(await addMessage({ selectedImage: selectedImage as File, message: message, heart: '',post:sharePost }))\r\n    dispatch(removeChat())\r\n}\r\n\r\nconst signedUserFollowing = signedUser.following.map(user=>(\r\n    <ShareSuggestion userName={user.userName} uid={user.uid} profileImage={user.profileImage}  fullName={user.fullName} />\r\n))\r\n\r\n\r\n\r\n// const selectedUsersEl = userToSend.map((user: any)=>(\r\n//        <h1 className='bg-blue-200 m-1 text-blue-500 rounded-2xl p-1 flex justify-center text-[15px]'>{user.userName}</h1>\r\n// ))\r\n\r\n    return (\r\n        <div className='bg-white w-[300px] sm:w-[500px] rounded-md flex  '>\r\n            <div className='w-[100%]'>\r\n                <div className='flex border-b-[1px] justify-center py-2'>\r\n                    <h1>Share</h1>\r\n                </div>\r\n              \r\n                <div className=' border-b-[1px]'>\r\n                    <h1 className='font-[500] text-[14px] p-2'>Suggested</h1>\r\n                  \r\n                    <div className='overflow-auto  w-[100%] h-[300px]'>\r\n                        {signedUserFollowing}\r\n                    </div>\r\n                </div>\r\n                <div className='p-2'>\r\n                    {currentChat.chatId ?\r\n                     <button onClick={sendPost}  className='bg-blue-500 hover:bg-blue-600 text-white font-[500] w-[100%] rounded-md py-2'>Send</button> :\r\n                     <button disabled={true}  className='bg-blue-200 text-white font-[500] w-[100%] rounded-md py-2 '>Send</button>}\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SharePostModal","import React from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../redux/hooks/redux-hooks\";\r\nimport { setUser } from \"../../../redux/slices/userSlice/userSlice/userSlice\";\r\nimport { setAnotherUser } from \"../../../redux/slices/userSlice/anotherUserSlice/anotherUserSlice\";\r\nimport { doc, getDoc, getDocs, serverTimestamp, setDoc, updateDoc } from \"firebase/firestore\";\r\nimport { db } from \"../../../firebase/firebase\";\r\nimport { updateDo } from \"typescript\";\r\n\r\n\r\ntype userToChat = {\r\n    profileImage: string,\r\n    userName: string,\r\n    uid: string\r\n}\r\n\r\n\r\nconst useChat = () => {\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n\r\n\r\n\r\n    const chatWithUser = async ({ uid, userName, profileImage }: userToChat) => {\r\n        const combineId = signedUser.uid > uid ? signedUser.uid + uid : uid + signedUser.uid\r\n        const anotherInChat = {\r\n            uid: uid,\r\n            userName: userName,\r\n            profileImage: profileImage,\r\n        }\r\n\r\n        const signedInChat = {\r\n            uid: signedUser.uid,\r\n            userName: signedUser.userName,\r\n            profileImage: signedUser.profileImage,\r\n        }\r\n\r\n\r\n\r\n        const docUsers = doc(db, \"chat\", combineId);\r\n        const docSnap = await getDoc(docUsers);\r\n        if (!docSnap.exists()) {\r\n\r\n        await setDoc(doc(db,'chat',combineId),{message : []})\r\n        \r\n        await updateDoc(doc(db,'chats',signedUser.uid),{\r\n            [combineId + '.userInfo'] : anotherInChat,\r\n            [combineId + '.date'] : serverTimestamp()\r\n        })\r\n\r\n        \r\n        await updateDoc(doc(db,'chats',uid),{\r\n            [combineId + '.userInfo'] : signedInChat,\r\n            [combineId + '.date'] : serverTimestamp()\r\n        })\r\n\r\n        \r\n            \r\n\r\n           \r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    return { chatWithUser }\r\n}\r\n\r\nexport default useChat\r\n\r\n","import { createAsyncThunk, nanoid } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../../redux/store/store';\r\nimport { updateDoc, doc, getDoc } from 'firebase/firestore';\r\nimport { setUser } from '../../../redux/slices/userSlice/userSlice/userSlice';\r\nimport { db } from '../../../firebase/firebase';\r\nimport { storage } from '../../../firebase/firebase';\r\nimport { useAppDispatch, useAppSelector } from '../../../redux/hooks/redux-hooks';\r\nimport { setAnotherUser } from '../../../redux/slices/userSlice/anotherUserSlice/anotherUserSlice';\r\nimport { async } from '@firebase/util';\r\n\r\ntype likePostType = {\r\n\r\n    uid: string\r\n    postId: string;\r\n}\r\n\r\nconst useLikeControl = () => {\r\n    const anotherUser = useAppSelector(user => user.anotherUser.user)\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const likePost = async ({ uid, postId }: likePostType) => {\r\n\r\n        const docRef = doc(db, \"users\", uid)\r\n        const docSnap = await getDoc(docRef);\r\n\r\n        console.log(uid)\r\n\r\n        console.log(docSnap.data())\r\n\r\n\r\n        const likedPerson =\r\n        {\r\n            userName: signedUser.userName,\r\n            fullName: signedUser.fullName,\r\n            profileImage: signedUser.profileImage,\r\n            uid: signedUser.uid\r\n        }\r\n\r\n\r\n\r\n\r\n        const newPostsArr = docSnap.data()?.posts.map((post: { postId: string; likes: any; }) => {\r\n            return post.postId === postId ?\r\n                { ...post, likes: [...post.likes, likedPerson] }\r\n                : post\r\n        })\r\n\r\n\r\n\r\n\r\n        if (signedUser.uid === uid) {\r\n            dispatch(setUser({\r\n                ...signedUser, posts: newPostsArr\r\n            }))\r\n        } else {\r\n            dispatch(setAnotherUser({\r\n                ...anotherUser, posts: newPostsArr\r\n            }))\r\n        }\r\n        console.log(newPostsArr)\r\n\r\n\r\n\r\n        console.log(docSnap.data())\r\n\r\n\r\n\r\n        await updateDoc(docRef, {\r\n            posts: newPostsArr\r\n        })\r\n\r\n        console.log(1)\r\n    }\r\n\r\n\r\n    const removeLike = async ({ uid, postId }: likePostType) => {\r\n        const docRef = doc(db, \"users\", uid)\r\n        const docSnap = await getDoc(docRef);\r\n        console.log(1)\r\n\r\n\r\n        const currentPost = docSnap.data()?.posts.find((post: { postId: string; }) => post.postId === postId)\r\n\r\n        const filtredPostLikes = currentPost.likes.filter((like: { uid: string; }) => like.uid !== signedUser.uid)\r\n\r\n        const newPostsArr = docSnap.data()?.posts.map((post: { postId: string; likes: any; }) => {\r\n            return post.postId === postId ?\r\n                { ...post, likes: filtredPostLikes }\r\n                : post\r\n        })\r\n\r\n\r\n        if (signedUser.uid === uid) {\r\n            dispatch(setUser({\r\n                ...signedUser, posts: newPostsArr\r\n            }))\r\n        } else {\r\n            dispatch(setAnotherUser({\r\n                ...anotherUser, posts: newPostsArr\r\n            }))\r\n        }\r\n\r\n\r\n        await updateDoc(docRef, {\r\n            posts: newPostsArr\r\n        })\r\n\r\n    }\r\n    return { likePost, removeLike }\r\n}\r\n\r\nexport default useLikeControl\r\n\r\n\r\n\r\n","import { createAsyncThunk, nanoid } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../../../store/store';\r\nimport { updateDoc, doc, getDoc } from 'firebase/firestore';\r\nimport { setUser } from '../userSlice';\r\nimport { db } from '../../../../../firebase/firebase';\r\nimport { storage } from '../../../../../firebase/firebase';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/redux-hooks';\r\nimport { setAnotherUser } from '../../anotherUserSlice/anotherUserSlice';\r\nimport SignedUser from '../../../../../pages/Profile/SignedUserProfile/SignedUser';\r\n\r\ntype CommentType = {\r\n\r\n    text: string\r\n    postId: string\r\n    userId: string\r\n\r\n}\r\n\r\n\r\n\r\nexport const addComment = createAsyncThunk('user/addComment', async ({ text, postId, userId }: CommentType, { dispatch, getState }) => {\r\n    \r\n    const userData = (getState() as RootState).user.user\r\n    const anotherUser = (getState() as RootState).anotherUser.user\r\n\r\n    const posts = userData.posts\r\n\r\n\r\n    const docRef = doc(db, \"users\", userId)\r\n    const docSnap = await getDoc(docRef);\r\n\r\n\r\n\r\n\r\n    // const currentPost = signedUser.posts.find(el => el.postId === postId)\r\n\r\n\r\n    const newComment = {\r\n        userId: userData.uid,\r\n        text: text,\r\n        likes: [],\r\n        commentId: nanoid(),\r\n        createdAt: (new Date()).getTime()\r\n    }\r\n\r\n\r\n    // const fixedPosts = [...posts, { ...currentPost, comments: [...currentPost.comments, newComment] }]\r\n    const newPostsArr = docSnap.data()?.posts.map((post: { postId: string; commets: any; }) => {\r\n        return post.postId === postId ?\r\n            { ...post, commets: [...post.commets, newComment] }\r\n            : post\r\n    })\r\n\r\n    console.log(userId)\r\n\r\n\r\n    if (userData.uid === userId) {\r\n        dispatch(setUser({\r\n            ...userData, posts: newPostsArr\r\n        }))\r\n    } else {\r\n        dispatch(setAnotherUser({\r\n            ...anotherUser, posts: newPostsArr\r\n        }))\r\n    }\r\n\r\n\r\n\r\n    await updateDoc(docRef, {\r\n        posts: newPostsArr\r\n    })\r\n\r\n\r\n\r\n\r\n})\r\n\r\n\r\n","import { createAsyncThunk, nanoid } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../../../store/store';\r\nimport { updateDoc, doc, arrayUnion, Timestamp } from 'firebase/firestore';\r\nimport { setUser } from '../userSlice';\r\nimport { db } from '../../../../../firebase/firebase';\r\nimport { storage } from '../../../../../firebase/firebase';\r\nimport { ref, uploadBytes, deleteObject, getDownloadURL } from 'firebase/storage';\r\nimport { useAppSelector } from '../../../../hooks/redux-hooks';\r\nimport { uuidv4 } from '@firebase/util';\r\n\r\ntype MessageType  = {\r\n  selectedImage: File ;\r\n  message: string;\r\n  heart:string;\r\n  post :any\r\n}\r\n\r\n\r\n\r\nexport const addMessage = createAsyncThunk('chat/addMessage', async ({ selectedImage,message,heart ,post}: MessageType, { dispatch, getState }) => {\r\n\r\n\r\nconst userChat = (getState() as any).chat.chat\r\nconst signedUser = (getState() as RootState).user.user\r\n\r\n  if (selectedImage) {\r\n      const imagesRef = ref(storage, `Images/${selectedImage?.name + uuidv4()}`)\r\n      await uploadBytes(imagesRef, selectedImage)\r\n      const imageAdress = await getDownloadURL(imagesRef)\r\n      await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n          message: arrayUnion({\r\n              id: uuidv4(),\r\n              senderId: signedUser.uid,\r\n              date: Timestamp.now(),\r\n              image: imageAdress,\r\n          })\r\n      })\r\n\r\n  } else if (message) {\r\n     \r\n          await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n              message: arrayUnion({\r\n                  id: uuidv4(),\r\n                  message,\r\n                  senderId: signedUser.uid,\r\n                  date: Timestamp.now(),\r\n              })\r\n          })\r\n\r\n\r\n          await updateDoc(doc(db, 'chats', signedUser.uid), {\r\n              [userChat.chatId + '.lastMessage']: {\r\n                  message,\r\n              }\r\n\r\n          })\r\n          await updateDoc(doc(db, 'chats', userChat.uid), {\r\n              [userChat.chatId + '.lastMessage']: {\r\n                  message,\r\n              }\r\n\r\n          })\r\n\r\n      \r\n  }else if (heart){\r\n    await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n      message: arrayUnion({\r\n          id: uuidv4(),\r\n          heart,\r\n          senderId: signedUser.uid,\r\n          date: Timestamp.now(),\r\n      })\r\n  })\r\n\r\n  }else if(post){\r\n    await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n        message: arrayUnion({\r\n            id: uuidv4(),\r\n            post,\r\n            senderId: signedUser.uid,\r\n            date: Timestamp.now(),\r\n        })\r\n    })\r\n  \r\n  }\r\n\r\n}\r\n)","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { db } from \"../../../../../firebase/firebase\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\nimport { setUser } from \"../userSlice\";\r\n\r\nimport { RootState } from \"../../../../store/store\";\r\n\r\ntype SavedPostType = {\r\n    postId: string,\r\n    user: string,\r\n    postImage:string\r\n\r\n\r\n}\r\n\r\nexport const savePost = createAsyncThunk('user/addToSaved',async ({postId,user,postImage} :SavedPostType , { dispatch,getState })=>{\r\n\r\n    const signedUser = (getState() as RootState).user.user\r\n    \r\n\r\n   const savedPost = {\r\n    postImage,\r\n    postId,\r\n    user\r\n   }\r\n\r\n\r\n\r\n   await updateDoc(doc(db, \"users\", signedUser.uid),{\r\n            savedPosts:arrayUnion(savedPost)\r\n   })\r\n\r\n   dispatch(setUser({...signedUser,savedPosts :[...signedUser.savedPosts,savedPost]},))\r\n\r\n})","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { db } from \"../../../../../firebase/firebase\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\nimport { setUser } from \"../userSlice\";\r\n\r\nimport { RootState } from \"../../../../store/store\";\r\n\r\ntype SavedPostType = {\r\n    postId: string,\r\n \r\n\r\n\r\n}\r\n\r\nexport const removeSaved = createAsyncThunk('user/removeSaved',async ({postId} :SavedPostType , { dispatch,getState })=>{\r\n\r\n    const signedUser = (getState() as RootState).user.user\r\n    \r\n\r\n \r\n\r\n   const filteredSavedPosts = signedUser.savedPosts.filter(post=>post.postId !== postId)\r\n\r\n\r\n   await updateDoc(doc(db, \"users\", signedUser.uid),{\r\n            savedPosts:filteredSavedPosts\r\n   })\r\n\r\n   dispatch(setUser({...signedUser,savedPosts :filteredSavedPosts},))\r\n\r\n})"],"names":["ReusableModal","visible","setVisible","children","className","onClick","e","stopPropagation","memo","Comments","text","userId","useState","user","setUser","useEffect","fetchData","docRef","doc","db","getDoc","docSnap","data","to","src","profileImage","alt","userName","fullName","uid","useParams","postId","navigate","useNavigate","dispatch","useAppDispatch","setText","signedUser","useAppSelector","anotherUser","visibleShare","setVisibleShare","ref","useRef","addNewComment","addComment","useLikeControl","likePost","removeLike","currentPost","posts","find","post","index","commentsEl","commets","map","comment","likedUsersEl","likes","userLikedPost","currentPostSaved","savedPosts","console","log","postImage","length","current","focus","SharePostModal","removeSaved","savePost","value","onChange","currentTarget","name","id","placeholder","useChat","chatWithUser","currentChat","chat","userInfo","chatId","removeChat","setChat","sharePost","selectedImage","message","sendPost","addMessage","heart","signedUserFollowing","following","disabled","combineId","anotherInChat","signedInChat","docUsers","exists","setDoc","updateDoc","serverTimestamp","likedPerson","newPostsArr","setAnotherUser","filtredPostLikes","filter","like","createAsyncThunk","getState","userData","newComment","commentId","nanoid","createdAt","Date","getTime","userChat","imagesRef","storage","uuidv4","uploadBytes","getDownloadURL","imageAdress","arrayUnion","senderId","date","Timestamp","image","savedPost","filteredSavedPosts"],"sourceRoot":""}