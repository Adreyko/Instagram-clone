{"version":3,"file":"static/js/670.2a7a5f92.chunk.js","mappings":"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","sources":["pages/Dashboard/FollowingPosts/FollowingPosts.tsx","pages/Dashboard/Dashboard.tsx","pages/Profile/SignedUserProfile/Modals/SharePostModal/ShareSuggestion.tsx","pages/Profile/SignedUserProfile/Modals/SharePostModal/SharePostModal.tsx","pages/Profile/hooks/useChat.tsx","pages/Profile/hooks/useLikeControl.ts","redux/slices/userSlice/userSlice/thunk/AddComment.ts","redux/slices/userSlice/userSlice/thunk/AddMessage.ts","redux/slices/userSlice/userSlice/thunk/AddToSaved.ts","redux/slices/userSlice/userSlice/thunk/RemoveFromSaved.ts"],"sourcesContent":["import { doc, getDoc } from 'firebase/firestore';\r\nimport React, { useState, useEffect, useRef, memo } from 'react'\r\nimport { db } from '../../../firebase/firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAppSelector, useAppDispatch } from '../../../redux/hooks/redux-hooks';\r\nimport useLikeControl from '../../Profile/hooks/useLikeControl';\r\nimport { addComment } from '../../../redux/slices/userSlice/userSlice/thunk/AddComment';\r\nimport { IPost } from '../../../interfaces/interfaces';\r\nimport { removeSaved } from '../../../redux/slices/userSlice/userSlice/thunk/RemoveFromSaved';\r\nimport { savePost } from '../../../redux/slices/userSlice/userSlice/thunk/AddToSaved';\r\nimport ReusableModal from '../../../components/Header/modals/ReusableModal';\r\nimport SharePostModal from '../../Profile/SignedUserProfile/Modals/SharePostModal/SharePostModal';\r\n\r\n\r\n\r\nconst FollowingPosts: React.FC<IPost> = ({ postImage, user, postId }) => {\r\n    const [userFollowing, setUserFollowin] = useState<any>()\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n    const anotherUser = useAppSelector(user => user.anotherUser.user)\r\n    const [visible, setVisible] = useState(false)\r\n    const [text, setText] = useState<string>('')\r\n    const dispatch = useAppDispatch()\r\n\r\n    const ref = useRef<HTMLTextAreaElement>(null)\r\n\r\n\r\n    const fetchData = async () => {\r\n        const docRef = doc(db, \"users\", user as string)\r\n        const docSnap = await getDoc(docRef);\r\n        setUserFollowin(docSnap.data())\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData()\r\n    }, [signedUser.posts, anotherUser.posts])\r\n\r\n\r\n\r\n    const currentPost = userFollowing?.posts.find((post: { postId: string | undefined }) => post.postId === postId)\r\n    const userLikedPost = currentPost?.likes.find((user: { uid: any }) => user.uid === signedUser.uid)\r\n    const { likePost, removeLike } = useLikeControl()\r\n\r\n    const currentPostSaved = signedUser?.savedPosts?.find(post => post.postId === currentPost?.postId)\r\n\r\n\r\n    const textAreaHandler = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n        setText(event.currentTarget.value)\r\n\r\n    }\r\n\r\n\r\n\r\n    const addNewComment = async () => {\r\n        dispatch(await addComment({ text: text, postId: postId as string, userId: user as string }))\r\n        setText('')\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='sm:w-[40%] w-[60%] sm:h-[800px]  h-[500px]  bg-white   flex flex-col   my-8 pb-8 '>\r\n            <div className='flex items-center  p-2'>\r\n                <img className='border-[1px] rounded-full h-10 w-10 mr-2' src={userFollowing?.profileImage ?  userFollowing?.profileImage : process.env.PUBLIC_URL +`/images/profile.png`} alt=\"\" />\r\n                <Link className='hover:text-zinc-400' to={`/${user}/`}>{userFollowing?.userName}</Link>\r\n            </div>\r\n            <div className='bg-black flex items-center justify-center  w-[100%] h-[80%] '>\r\n                <img className='   w-full h-full    flex items-center justify-center object-contain' src={postImage} alt=\"\" />\r\n            </div>\r\n            <div className='flex justify-between'>\r\n                <div className='flex mt-2  p-2'>\r\n\r\n                    <h1 className='mr-2'>\r\n                        {\r\n                            userLikedPost ?\r\n                                <i onClick={() => removeLike({ postId: postId as string, uid: user as string })}\r\n                                    className=\"ri-heart-3-fill text-2xl text-red-400 cursor-pointer\">\r\n\r\n                                </i>\r\n                                :\r\n                                <i\r\n                                    onClick={() => likePost({ postId: postId as string, uid: user as string })}\r\n\r\n\r\n                                    className=\"ri-heart-3-line text-2xl cursor-pointer hover:text-zinc-400\">\r\n                                </i>\r\n                        }\r\n                    </h1>\r\n                    <i onClick={() => ref.current?.focus()} className=\"ri-chat-3-line text-2xl cursor-pointer hover:text-zinc-400 mr-2\"></i>\r\n                    <i onClick={() => setVisible(true)} className=\"ri-send-plane-line pt-[1px] cursor-pointer text-2xl hover:text-zinc-400\"></i>\r\n\r\n                    <ReusableModal visible={visible} setVisible={setVisible}>\r\n                        <SharePostModal postId={postId}  profileImage={userFollowing?.profileImage} user={user} postImage={postImage} userName={userFollowing?.userName}/>\r\n                    </ReusableModal>\r\n\r\n                </div>\r\n                {signedUser.uid === user ? '' :\r\n                    <div className='mt-2  p-2'>\r\n                        {\r\n                            currentPostSaved ?\r\n                                <i\r\n                                    onClick={() => dispatch(removeSaved(currentPost))}\r\n                                    className=\"ri-bookmark-fill  text-2xl cursor-pointer\"></i>\r\n                                :\r\n                                <i className=\"ri-bookmark-line text-2xl cursor-pointer hover:text-zinc-400\"\r\n                                    onClick={() => dispatch(savePost(currentPost))}>\r\n                                </i>}\r\n\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n            <div className='flex ml-2  '>\r\n                <h1 className='mr-2'>{currentPost?.likes?.length}</h1>\r\n                <h1>{currentPost?.likes?.length > 1 ? 'likes' : 'like'}</h1>\r\n            </div>\r\n            <div className='flex justify-between p-2  items-center border-b-[1px] '>\r\n                <textarea ref={ref} className='w-[90%] resize-none outline-none h-8  '\r\n                    value={text}\r\n                    onChange={(e) => textAreaHandler(e)}\r\n                    name=\"\" id=\"\"\r\n                    placeholder='Add a comment...'></textarea>\r\n                {text !== '' ? <button className='text-blue-500 hover:text-black' onClick={() => addNewComment()}>Post</button> : ''}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default memo(FollowingPosts)","import React, { useState, useEffect, memo } from 'react'\r\n\r\nimport PagesRoutes from '../../constants/router-types'\r\nimport Header from '../../components/Header/Header'\r\nimport { Navigate, } from 'react-router-dom'\r\nimport { useAppSelector } from '../../redux/hooks/redux-hooks';\r\nimport FollowingPosts from './FollowingPosts/FollowingPosts'\r\nimport { doc, getDoc } from 'firebase/firestore';\r\nimport { db } from '../../firebase/firebase'\r\nimport Recommend from './Recommend/Recommend';\r\nimport { auth } from '../../firebase/firebase'\r\n\r\nconst MainPage = () => {\r\n\r\n\r\n  const signedUser = useAppSelector(user => user.user.user)\r\n  const signedUserFollowing = signedUser.following\r\n  const [followingPosts, setFollowingPosts] = useState<any>([])\r\n\r\n\r\n\r\n  const followingPostEl = followingPosts.map((post: { postImage: string; user: string; postId: string }) => (\r\n    <FollowingPosts postImage={post.postImage} user={post.user} postId={post.postId} />\r\n  ))\r\n\r\n\r\n\r\n  let initialized = false;\r\n  useEffect(() => {\r\n    if (!initialized) {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      initialized = true\r\n      if (signedUser.uid) {\r\n        const allFollowindPostsDb = () => {\r\n          signedUserFollowing.forEach(async (user) => {\r\n            const docUser = doc(db, \"users\", user.uid);\r\n            // console.log(user.uid)\r\n            const docSnap = await getDoc(docUser);\r\n            const followingUser = docSnap.data()\r\n            console.log(followingUser?.posts)\r\n            setFollowingPosts((prevAllPosts: any) => [...prevAllPosts, ...followingUser?.posts])\r\n          })\r\n        }\r\n        allFollowindPostsDb()\r\n      }\r\n    }\r\n  }, [signedUser.uid])\r\n\r\n\r\n\r\n\r\n  return auth.currentUser ? (\r\n\r\n    <div className='sm:flex  '>\r\n      <div className='w-[20%]'>\r\n        <Header />\r\n      </div>\r\n      {signedUserFollowing.length === 0 ?\r\n        <div className='w-[100%] h-[100vh] flex justify-center'>\r\n          <Recommend />\r\n        </div>\r\n        :\r\n        <div className='flex py-4  flex-col  justify-center items-center w-[100%]'>\r\n          {followingPostEl}\r\n        </div>}\r\n\r\n\r\n    </div>\r\n\r\n\r\n  ) : (\r\n    <Navigate to={PagesRoutes.SIGN_IN} />\r\n  )\r\n}\r\n\r\nexport default memo(MainPage)","import React from 'react'\r\nimport { IuserData } from '../../../../../interfaces/interfaces'\r\nimport { useAppDispatch, useAppSelector } from '../../../../../redux/hooks/redux-hooks'\r\nimport useChat from '../../../hooks/useChat'\r\nimport { setChat } from '../../../../../redux/slices/chatSlice/chatSlice'\r\nimport { removeChat } from '../../../../../redux/slices/chatSlice/chatSlice'\r\n\r\n\r\n\r\nconst ShareSuggestion = ({ uid, profileImage, userName, fullName }: IuserData) => {\r\n\r\n    const { chatWithUser } = useChat()\r\n    const dispatch = useAppDispatch()\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n    const currentChat = useAppSelector(chat => chat.chat.chat)\r\n\r\n\r\n    const chatId = signedUser.uid > uid ? signedUser.uid + uid : uid + signedUser.uid\r\n\r\n\r\n    const userInfo = {\r\n        userName,\r\n        profileImage,\r\n        uid,\r\n        chatId\r\n    }\r\n\r\n    return (\r\n        <div className='flex p-2 hover:bg-zinc-200 cursor-pointer justify-between'>\r\n            <div className='flex w-[100%]' >\r\n                <img className='h-12 w-12 rounded-3xl' src={profileImage ? profileImage : process.env.PUBLIC_URL +`/images/profile.png`} alt=\"\" />\r\n                <div className='ml-2 text-[15px]'>\r\n                    <h1 className='font-[500]'>{userName}</h1>\r\n                    <h1 className='text-gray-400'>{fullName}</h1>\r\n\r\n                </div>\r\n            </div>\r\n            {currentChat.uid === uid ?\r\n                <i onClick={()=>dispatch(removeChat())} className=\"ri-checkbox-circle-fill text-2xl text-blue-400 \"></i>\r\n                :\r\n                <i onClick={() => dispatch(setChat(userInfo))} className=\"ri-checkbox-blank-circle-line text-2xl\"></i>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShareSuggestion","import React,{useEffect, useState} from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../../../../../redux/hooks/redux-hooks'\r\nimport ShareSuggestion from './ShareSuggestion'\r\nimport { addMessage } from '../../../../../redux/slices/userSlice/userSlice/thunk/AddMessage';\r\nimport useChat from '../../../hooks/useChat';\r\nimport Search from '../../../../../components/Header/modals/Search/Search';\r\nimport { removeChat } from '../../../../../redux/slices/chatSlice/chatSlice';\r\n\r\nexport interface IPost {\r\n\r\n    postImage: string;\r\n    user: string;\r\n    postId: string;\r\n    profileImage:string;\r\n    userName:string,\r\n\r\n}\r\n\r\nconst SharePostModal = ({user,postImage,profileImage,postId,userName} : IPost) => {\r\n   \r\nconst sharePost = [\r\n    user,\r\n    postImage,\r\n    postId,\r\n    profileImage,\r\n    userName\r\n\r\n]\r\nconst signedUser = useAppSelector(user=>user.user.user)\r\nconst currentChat = useAppSelector(chat=>chat.chat.chat)\r\nconst [selectedImage, setSelectedImage] = useState<File>()\r\nconst [message, setMessage] = useState('')\r\nconst dispatch = useAppDispatch()\r\nconst [width,setWidth] = useState(0)\r\n// const [userToSend,setUserToSend] = useState<any>([])\r\n\r\nconst { chatWithUser } = useChat()\r\n\r\n\r\n\r\n// useEffect(()=>{\r\n// if(currentChat.chatId !== ''){\r\n//     setUserToSend((prev: any)=>[...prev,currentChat])\r\n// }\r\n\r\n\r\n\r\n// },[currentChat.chatId])\r\n\r\n\r\nconst sendPost = async ()=>{\r\n    chatWithUser({uid: currentChat.uid,profileImage:currentChat.profileImage,userName:currentChat.userName})\r\n    dispatch(await addMessage({ selectedImage: selectedImage as File, message: message, heart: '',post:sharePost }))\r\n    dispatch(removeChat())\r\n}\r\n\r\nconst signedUserFollowing = signedUser.following.map(user=>(\r\n    <ShareSuggestion userName={user.userName} uid={user.uid} profileImage={user.profileImage}  fullName={user.fullName} />\r\n))\r\n\r\n\r\n\r\n// const selectedUsersEl = userToSend.map((user: any)=>(\r\n//        <h1 className='bg-blue-200 m-1 text-blue-500 rounded-2xl p-1 flex justify-center text-[15px]'>{user.userName}</h1>\r\n// ))\r\n\r\n    return (\r\n        <div className='bg-white w-[300px] sm:w-[500px] rounded-md flex  '>\r\n            <div className='w-[100%]'>\r\n                <div className='flex border-b-[1px] justify-center py-2'>\r\n                    <h1>Share</h1>\r\n                </div>\r\n              \r\n                <div className=' border-b-[1px]'>\r\n                    <h1 className='font-[500] text-[14px] p-2'>Suggested</h1>\r\n                  \r\n                    <div className='overflow-auto  w-[100%] h-[300px]'>\r\n                        {signedUserFollowing}\r\n                    </div>\r\n                </div>\r\n                <div className='p-2'>\r\n                    {currentChat.chatId ?\r\n                     <button onClick={sendPost}  className='bg-blue-500 hover:bg-blue-600 text-white font-[500] w-[100%] rounded-md py-2'>Send</button> :\r\n                     <button disabled={true}  className='bg-blue-200 text-white font-[500] w-[100%] rounded-md py-2 '>Send</button>}\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SharePostModal","import React from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../redux/hooks/redux-hooks\";\r\nimport { setUser } from \"../../../redux/slices/userSlice/userSlice/userSlice\";\r\nimport { setAnotherUser } from \"../../../redux/slices/userSlice/anotherUserSlice/anotherUserSlice\";\r\nimport { doc, getDoc, getDocs, serverTimestamp, setDoc, updateDoc } from \"firebase/firestore\";\r\nimport { db } from \"../../../firebase/firebase\";\r\nimport { updateDo } from \"typescript\";\r\n\r\n\r\ntype userToChat = {\r\n    profileImage: string,\r\n    userName: string,\r\n    uid: string\r\n}\r\n\r\n\r\nconst useChat = () => {\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n\r\n\r\n\r\n    const chatWithUser = async ({ uid, userName, profileImage }: userToChat) => {\r\n        const combineId = signedUser.uid > uid ? signedUser.uid + uid : uid + signedUser.uid\r\n        const anotherInChat = {\r\n            uid: uid,\r\n            userName: userName,\r\n            profileImage: profileImage,\r\n        }\r\n\r\n        const signedInChat = {\r\n            uid: signedUser.uid,\r\n            userName: signedUser.userName,\r\n            profileImage: signedUser.profileImage,\r\n        }\r\n\r\n\r\n\r\n        const docUsers = doc(db, \"chat\", combineId);\r\n        const docSnap = await getDoc(docUsers);\r\n        if (!docSnap.exists()) {\r\n\r\n        await setDoc(doc(db,'chat',combineId),{message : []})\r\n        \r\n        await updateDoc(doc(db,'chats',signedUser.uid),{\r\n            [combineId + '.userInfo'] : anotherInChat,\r\n            [combineId + '.date'] : serverTimestamp()\r\n        })\r\n\r\n        \r\n        await updateDoc(doc(db,'chats',uid),{\r\n            [combineId + '.userInfo'] : signedInChat,\r\n            [combineId + '.date'] : serverTimestamp()\r\n        })\r\n\r\n        \r\n            \r\n\r\n           \r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    return { chatWithUser }\r\n}\r\n\r\nexport default useChat\r\n\r\n","import { createAsyncThunk, nanoid } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../../redux/store/store';\r\nimport { updateDoc, doc, getDoc } from 'firebase/firestore';\r\nimport { setUser } from '../../../redux/slices/userSlice/userSlice/userSlice';\r\nimport { db } from '../../../firebase/firebase';\r\nimport { storage } from '../../../firebase/firebase';\r\nimport { useAppDispatch, useAppSelector } from '../../../redux/hooks/redux-hooks';\r\nimport { setAnotherUser } from '../../../redux/slices/userSlice/anotherUserSlice/anotherUserSlice';\r\nimport { async } from '@firebase/util';\r\n\r\ntype likePostType = {\r\n\r\n    uid: string\r\n    postId: string;\r\n}\r\n\r\nconst useLikeControl = () => {\r\n    const anotherUser = useAppSelector(user => user.anotherUser.user)\r\n    const signedUser = useAppSelector(user => user.user.user)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const likePost = async ({ uid, postId }: likePostType) => {\r\n\r\n        const docRef = doc(db, \"users\", uid)\r\n        const docSnap = await getDoc(docRef);\r\n\r\n        console.log(uid)\r\n\r\n        console.log(docSnap.data())\r\n\r\n\r\n        const likedPerson =\r\n        {\r\n            userName: signedUser.userName,\r\n            fullName: signedUser.fullName,\r\n            profileImage: signedUser.profileImage,\r\n            uid: signedUser.uid\r\n        }\r\n\r\n\r\n\r\n\r\n        const newPostsArr = docSnap.data()?.posts.map((post: { postId: string; likes: any; }) => {\r\n            return post.postId === postId ?\r\n                { ...post, likes: [...post.likes, likedPerson] }\r\n                : post\r\n        })\r\n\r\n\r\n\r\n\r\n        if (signedUser.uid === uid) {\r\n            dispatch(setUser({\r\n                ...signedUser, posts: newPostsArr\r\n            }))\r\n        } else {\r\n            dispatch(setAnotherUser({\r\n                ...anotherUser, posts: newPostsArr\r\n            }))\r\n        }\r\n        console.log(newPostsArr)\r\n\r\n\r\n\r\n        console.log(docSnap.data())\r\n\r\n\r\n\r\n        await updateDoc(docRef, {\r\n            posts: newPostsArr\r\n        })\r\n\r\n        console.log(1)\r\n    }\r\n\r\n\r\n    const removeLike = async ({ uid, postId }: likePostType) => {\r\n        const docRef = doc(db, \"users\", uid)\r\n        const docSnap = await getDoc(docRef);\r\n        console.log(1)\r\n\r\n\r\n        const currentPost = docSnap.data()?.posts.find((post: { postId: string; }) => post.postId === postId)\r\n\r\n        const filtredPostLikes = currentPost.likes.filter((like: { uid: string; }) => like.uid !== signedUser.uid)\r\n\r\n        const newPostsArr = docSnap.data()?.posts.map((post: { postId: string; likes: any; }) => {\r\n            return post.postId === postId ?\r\n                { ...post, likes: filtredPostLikes }\r\n                : post\r\n        })\r\n\r\n\r\n        if (signedUser.uid === uid) {\r\n            dispatch(setUser({\r\n                ...signedUser, posts: newPostsArr\r\n            }))\r\n        } else {\r\n            dispatch(setAnotherUser({\r\n                ...anotherUser, posts: newPostsArr\r\n            }))\r\n        }\r\n\r\n\r\n        await updateDoc(docRef, {\r\n            posts: newPostsArr\r\n        })\r\n\r\n    }\r\n    return { likePost, removeLike }\r\n}\r\n\r\nexport default useLikeControl\r\n\r\n\r\n\r\n","import { createAsyncThunk, nanoid } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../../../store/store';\r\nimport { updateDoc, doc, getDoc } from 'firebase/firestore';\r\nimport { setUser } from '../userSlice';\r\nimport { db } from '../../../../../firebase/firebase';\r\nimport { storage } from '../../../../../firebase/firebase';\r\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/redux-hooks';\r\nimport { setAnotherUser } from '../../anotherUserSlice/anotherUserSlice';\r\nimport SignedUser from '../../../../../pages/Profile/SignedUserProfile/SignedUser';\r\n\r\ntype CommentType = {\r\n\r\n    text: string\r\n    postId: string\r\n    userId: string\r\n\r\n}\r\n\r\n\r\n\r\nexport const addComment = createAsyncThunk('user/addComment', async ({ text, postId, userId }: CommentType, { dispatch, getState }) => {\r\n    \r\n    const userData = (getState() as RootState).user.user\r\n    const anotherUser = (getState() as RootState).anotherUser.user\r\n\r\n    const posts = userData.posts\r\n\r\n\r\n    const docRef = doc(db, \"users\", userId)\r\n    const docSnap = await getDoc(docRef);\r\n\r\n\r\n\r\n\r\n    // const currentPost = signedUser.posts.find(el => el.postId === postId)\r\n\r\n\r\n    const newComment = {\r\n        userId: userData.uid,\r\n        text: text,\r\n        likes: [],\r\n        commentId: nanoid(),\r\n        createdAt: (new Date()).getTime()\r\n    }\r\n\r\n\r\n    // const fixedPosts = [...posts, { ...currentPost, comments: [...currentPost.comments, newComment] }]\r\n    const newPostsArr = docSnap.data()?.posts.map((post: { postId: string; commets: any; }) => {\r\n        return post.postId === postId ?\r\n            { ...post, commets: [...post.commets, newComment] }\r\n            : post\r\n    })\r\n\r\n    console.log(userId)\r\n\r\n\r\n    if (userData.uid === userId) {\r\n        dispatch(setUser({\r\n            ...userData, posts: newPostsArr\r\n        }))\r\n    } else {\r\n        dispatch(setAnotherUser({\r\n            ...anotherUser, posts: newPostsArr\r\n        }))\r\n    }\r\n\r\n\r\n\r\n    await updateDoc(docRef, {\r\n        posts: newPostsArr\r\n    })\r\n\r\n\r\n\r\n\r\n})\r\n\r\n\r\n","import { createAsyncThunk, nanoid } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../../../store/store';\r\nimport { updateDoc, doc, arrayUnion, Timestamp } from 'firebase/firestore';\r\nimport { setUser } from '../userSlice';\r\nimport { db } from '../../../../../firebase/firebase';\r\nimport { storage } from '../../../../../firebase/firebase';\r\nimport { ref, uploadBytes, deleteObject, getDownloadURL } from 'firebase/storage';\r\nimport { useAppSelector } from '../../../../hooks/redux-hooks';\r\nimport { uuidv4 } from '@firebase/util';\r\n\r\ntype MessageType  = {\r\n  selectedImage: File ;\r\n  message: string;\r\n  heart:string;\r\n  post :any\r\n}\r\n\r\n\r\n\r\nexport const addMessage = createAsyncThunk('chat/addMessage', async ({ selectedImage,message,heart ,post}: MessageType, { dispatch, getState }) => {\r\n\r\n\r\nconst userChat = (getState() as any).chat.chat\r\nconst signedUser = (getState() as RootState).user.user\r\n\r\n  if (selectedImage) {\r\n      const imagesRef = ref(storage, `Images/${selectedImage?.name + uuidv4()}`)\r\n      await uploadBytes(imagesRef, selectedImage)\r\n      const imageAdress = await getDownloadURL(imagesRef)\r\n      await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n          message: arrayUnion({\r\n              id: uuidv4(),\r\n              senderId: signedUser.uid,\r\n              date: Timestamp.now(),\r\n              image: imageAdress,\r\n          })\r\n      })\r\n\r\n  } else if (message) {\r\n     \r\n          await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n              message: arrayUnion({\r\n                  id: uuidv4(),\r\n                  message,\r\n                  senderId: signedUser.uid,\r\n                  date: Timestamp.now(),\r\n              })\r\n          })\r\n\r\n\r\n          await updateDoc(doc(db, 'chats', signedUser.uid), {\r\n              [userChat.chatId + '.lastMessage']: {\r\n                  message,\r\n              }\r\n\r\n          })\r\n          await updateDoc(doc(db, 'chats', userChat.uid), {\r\n              [userChat.chatId + '.lastMessage']: {\r\n                  message,\r\n              }\r\n\r\n          })\r\n\r\n      \r\n  }else if (heart){\r\n    await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n      message: arrayUnion({\r\n          id: uuidv4(),\r\n          heart,\r\n          senderId: signedUser.uid,\r\n          date: Timestamp.now(),\r\n      })\r\n  })\r\n\r\n  }else if(post){\r\n    await updateDoc(doc(db, 'chat', userChat.chatId), {\r\n        message: arrayUnion({\r\n            id: uuidv4(),\r\n            post,\r\n            senderId: signedUser.uid,\r\n            date: Timestamp.now(),\r\n        })\r\n    })\r\n  \r\n  }\r\n\r\n}\r\n)","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { db } from \"../../../../../firebase/firebase\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\nimport { setUser } from \"../userSlice\";\r\n\r\nimport { RootState } from \"../../../../store/store\";\r\n\r\ntype SavedPostType = {\r\n    postId: string,\r\n    user: string,\r\n    postImage:string\r\n\r\n\r\n}\r\n\r\nexport const savePost = createAsyncThunk('user/addToSaved',async ({postId,user,postImage} :SavedPostType , { dispatch,getState })=>{\r\n\r\n    const signedUser = (getState() as RootState).user.user\r\n    \r\n\r\n   const savedPost = {\r\n    postImage,\r\n    postId,\r\n    user\r\n   }\r\n\r\n\r\n\r\n   await updateDoc(doc(db, \"users\", signedUser.uid),{\r\n            savedPosts:arrayUnion(savedPost)\r\n   })\r\n\r\n   dispatch(setUser({...signedUser,savedPosts :[...signedUser.savedPosts,savedPost]},))\r\n\r\n})","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { db } from \"../../../../../firebase/firebase\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\nimport { setUser } from \"../userSlice\";\r\n\r\nimport { RootState } from \"../../../../store/store\";\r\n\r\ntype SavedPostType = {\r\n    postId: string,\r\n \r\n\r\n\r\n}\r\n\r\nexport const removeSaved = createAsyncThunk('user/removeSaved',async ({postId} :SavedPostType , { dispatch,getState })=>{\r\n\r\n    const signedUser = (getState() as RootState).user.user\r\n    \r\n\r\n \r\n\r\n   const filteredSavedPosts = signedUser.savedPosts.filter(post=>post.postId !== postId)\r\n\r\n\r\n   await updateDoc(doc(db, \"users\", signedUser.uid),{\r\n            savedPosts:filteredSavedPosts\r\n   })\r\n\r\n   dispatch(setUser({...signedUser,savedPosts :filteredSavedPosts},))\r\n\r\n})"],"names":["FollowingPosts","postImage","user","postId","useState","userFollowing","setUserFollowin","signedUser","useAppSelector","anotherUser","visible","setVisible","text","setText","dispatch","useAppDispatch","ref","useRef","fetchData","docRef","doc","db","getDoc","docSnap","data","useEffect","posts","currentPost","find","post","userLikedPost","likes","uid","useLikeControl","likePost","removeLike","currentPostSaved","savedPosts","addNewComment","addComment","userId","className","src","profileImage","process","alt","to","userName","onClick","current","focus","ReusableModal","SharePostModal","removeSaved","savePost","length","value","onChange","e","currentTarget","name","id","placeholder","memo","MainPage","signedUserFollowing","following","followingPosts","setFollowingPosts","followingPostEl","map","initialized","forEach","docUser","followingUser","console","log","prevAllPosts","auth","Header","Recommend","PagesRoutes","fullName","useChat","chatWithUser","currentChat","chat","userInfo","chatId","removeChat","setChat","sharePost","selectedImage","message","sendPost","addMessage","heart","disabled","combineId","anotherInChat","signedInChat","docUsers","exists","setDoc","updateDoc","serverTimestamp","likedPerson","newPostsArr","setUser","setAnotherUser","filtredPostLikes","filter","like","createAsyncThunk","getState","userData","newComment","commentId","nanoid","createdAt","Date","getTime","commets","userChat","imagesRef","storage","uuidv4","uploadBytes","getDownloadURL","imageAdress","arrayUnion","senderId","date","Timestamp","image","savedPost","filteredSavedPosts"],"sourceRoot":""}